scalar GraphQLDate

type Job {
  _id: ID!
  personel: Int!
  location: Location!
  title: String!
  rate: Float!
  currency: CurrencyType!
  description: String!
  skills: [Skill]
  agent: Representative
  representative: Representative!
  company: Company!
  start: GraphQLDate!
  end: GraphQLDate!
  status: StatusType!
  created: GraphQLDate!
}

input JobInput {
  personel: Int!
  location: String!
  title: String!
  rate: Float!
  currency: CurrencyType!
  description: String!
  skills: [String]
  agent: String
  representative: String!
  company: String!
  start: GraphQLDate!
  end: GraphQLDate!
  created: GraphQLDate!
  status: StatusType = New
}

type User {
  _id: ID!
  name: String!
  surname: String!
  phone: String!
  position: String!
  email: String!
  password: String
}

input CreateUserInput {
  name: String!
  surname: String!
  phone: String!
  position: String!
  email: String!
  password: String!
}

input UserInput {
  name: String!
  surname: String!
  phone: String!
  position: String!
  email: String!
}

type AuthData {
  userId: ID!
  token: String!
  tokenExpiration: Int!
}

type Location {
  _id: ID!
  cid: ID!
  city: String!
  address: String!
  country: String!
  postcode: String!
}

input LocationInput {
  cid: ID!
  city: String!
  address: String!
  country: String!
  postcode: String!
}

type Representative {
  _id: ID!
  cid: ID!
  name: String!
  email: String!
  phone: String!
}

input RepresentativeInput {
  cid: ID!
  name: String!
  email: String!
  phone: String!
}

type Company {
  _id: ID!
  name: String!
}

input CompanyInput {
  name: String!
}

type Skill {
  _id: ID!
  name: String!
}

input SkillInput {
  name: String!
}

type JobCount {
  New: Int
  Assigned: Int
  Negotiation: Int
  Signed: Int
  Ongoing: Int
  Closed: Int
}

type JobsPagination {
  jobs: [Job!]!
  pages: Int
  records: Int
}

enum StatusType {
  New
  Assigned
  Negotiation
  Signed
  Ongoing
  Closed
}

enum CurrencyType {
  GBP
  PLN
  EUR
}

type Query {
  job(
    _id: ID,
    currency: String,
    status: String,
    company: ID,
    personMin: Int,
    personMax: Int,
    title: String,
    page: Int = 1,
    records: Int = 5
  ): JobsPagination
  user(_id: ID): [User!]
  login(password: String!, email:String!): AuthData!
  location(cid: ID): [Location]
  representative(cid: ID): [Representative]
  company: [Company]
  skill: [Skill]
  jobCount(status: StatusType): [JobCount!]!
}
type Mutation {
  userAdd(user: CreateUserInput!): User!
  jobAdd(job: JobInput!): Job!
  skillAdd(skill: SkillInput!): Skill!
  companyAdd(company: CompanyInput!): Company!
  locationAdd(location: LocationInput!): Location!
  repAdd(representative: RepresentativeInput!): Representative!
  updateJob(_id: ID, changes: JobInput!): Job!
  updateUser(_id: ID, changes: UserInput!): User!
  jobDelete(_id: ID!): Boolean!
  deleteUser(_id: ID!): Boolean!
}
