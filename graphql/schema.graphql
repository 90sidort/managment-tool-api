scalar GraphQLDate

type Job {
  _id: ID!
  personel: Int!
  location: Location!
  title: String!
  rate: Float!
  currency: CurrencyType!
  description: String!
  skills: [Skill]
  agent: Representative
  representative: Representative!
  company: Company!
  start: GraphQLDate!
  end: GraphQLDate!
  status: StatusType!
  created: GraphQLDate!
}

input JobInput {
  personel: Int!
  location: String!
  title: String!
  rate: Float!
  currency: CurrencyType!
  description: String!
  skills: [String]
  agent: String
  representative: String!
  company: String!
  start: GraphQLDate!
  end: GraphQLDate!
  created: GraphQLDate!
  status: StatusType = New
}

type Location {
  _id: ID!
  cid: ID!
  city: String!
  address: String!
  country: String!
  postcode: String!
}

input LocationInput {
  cid: ID!
  city: String!
  address: String!
  country: String!
  postcode: String!
}

type Representative {
  _id: ID!
  cid: ID!
  name: String!
  email: String!
  phone: String!
}

input RepresentativeInput {
  cid: ID!
  name: String!
  email: String!
  phone: String!
}

type Company {
  _id: ID!
  name: String!
}

input CompanyInput {
  name: String!
}

type Skill {
  _id: ID!
  name: String!
}

input SkillInput {
  name: String!
}

enum StatusType {
  New
  Assigned
  Negotiation
  Signed
  Ongoing
  Closed
}

enum CurrencyType {
  GBP
  PLN
  EUR
}

type Query {
  job(
    _id: ID,
    currency: String,
    status: String,
    company: ID,
    personMin: Int,
    personMax: Int,
    title: String): [Job]
  location(cid: ID): [Location]
  representative(cid: ID): [Representative]
  company: [Company]
  skill: [Skill]
}
type Mutation {
  jobAdd(job: JobInput!): Job!
  skillAdd(skill: SkillInput!): Skill!
  companyAdd(company: CompanyInput!): Company!
  locationAdd(location: LocationInput!): Location!
  repAdd(representative: RepresentativeInput!): Representative!
  updateJob(_id: ID, changes: JobInput!): Job!
  jobDelete(_id: ID!): Boolean!
}
